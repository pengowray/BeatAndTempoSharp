//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BTTLib {

public class BTT {
  public static SWIGTYPE_p_Opaque_BTT_Struct btt_new(int spectral_flux_stft_len, int spectral_flux_stft_overlap, int oss_filter_order, int oss_length, int cbss_length, int onset_threshold_len, double sample_rate, int analysis_latency_onset_adjustment, int analysis_latency_beat_adjustment) {
    global::System.IntPtr cPtr = BTTPINVOKE.btt_new(spectral_flux_stft_len, spectral_flux_stft_overlap, oss_filter_order, oss_length, cbss_length, onset_threshold_len, sample_rate, analysis_latency_onset_adjustment, analysis_latency_beat_adjustment);
    SWIGTYPE_p_Opaque_BTT_Struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Opaque_BTT_Struct(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_Opaque_BTT_Struct btt_new_default() {
    global::System.IntPtr cPtr = BTTPINVOKE.btt_new_default();
    SWIGTYPE_p_Opaque_BTT_Struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Opaque_BTT_Struct(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_Opaque_BTT_Struct btt_destroy(SWIGTYPE_p_Opaque_BTT_Struct self) {
    global::System.IntPtr cPtr = BTTPINVOKE.btt_destroy(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    SWIGTYPE_p_Opaque_BTT_Struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Opaque_BTT_Struct(cPtr, false);
    return ret;
  }

  public static void btt_process(SWIGTYPE_p_Opaque_BTT_Struct self, SWIGTYPE_p_float input, int num_samples) {
    BTTPINVOKE.btt_process(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), SWIGTYPE_p_float.getCPtr(input), num_samples);
  }

  public static double btt_get_sample_rate(SWIGTYPE_p_Opaque_BTT_Struct self) {
    double ret = BTTPINVOKE.btt_get_sample_rate(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static void btt_init(SWIGTYPE_p_Opaque_BTT_Struct self) {
    BTTPINVOKE.btt_init(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
  }

  public static void btt_clear(SWIGTYPE_p_Opaque_BTT_Struct self) {
    BTTPINVOKE.btt_clear(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
  }

  public static void btt_init_tempo(SWIGTYPE_p_Opaque_BTT_Struct self, double bpm) {
    BTTPINVOKE.btt_init_tempo(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), bpm);
  }

  public static int btt_get_beat_period_audio_samples(SWIGTYPE_p_Opaque_BTT_Struct self) {
    int ret = BTTPINVOKE.btt_get_beat_period_audio_samples(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static double btt_get_tempo_bpm(SWIGTYPE_p_Opaque_BTT_Struct self) {
    double ret = BTTPINVOKE.btt_get_tempo_bpm(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static double btt_get_tempo_certainty(SWIGTYPE_p_Opaque_BTT_Struct self) {
    double ret = BTTPINVOKE.btt_get_tempo_certainty(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static void btt_set_count_in_n(SWIGTYPE_p_Opaque_BTT_Struct self, int n) {
    BTTPINVOKE.btt_set_count_in_n(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), n);
  }

  public static int btt_get_count_in_n(SWIGTYPE_p_Opaque_BTT_Struct self) {
    int ret = BTTPINVOKE.btt_get_count_in_n(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static void btt_set_metronome_bpm(SWIGTYPE_p_Opaque_BTT_Struct self, double bpm) {
    BTTPINVOKE.btt_set_metronome_bpm(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), bpm);
  }

  public static void btt_set_use_amplitude_normalization(SWIGTYPE_p_Opaque_BTT_Struct self, int use) {
    BTTPINVOKE.btt_set_use_amplitude_normalization(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), use);
  }

  public static int btt_get_use_amplitude_normalization(SWIGTYPE_p_Opaque_BTT_Struct self) {
    int ret = BTTPINVOKE.btt_get_use_amplitude_normalization(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static void btt_set_spectral_compression_gamma(SWIGTYPE_p_Opaque_BTT_Struct self, double gamma) {
    BTTPINVOKE.btt_set_spectral_compression_gamma(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), gamma);
  }

  public static double btt_get_spectral_compression_gamma(SWIGTYPE_p_Opaque_BTT_Struct self) {
    double ret = BTTPINVOKE.btt_get_spectral_compression_gamma(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static void btt_set_oss_filter_cutoff(SWIGTYPE_p_Opaque_BTT_Struct self, double Hz) {
    BTTPINVOKE.btt_set_oss_filter_cutoff(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), Hz);
  }

  public static double btt_get_oss_filter_cutoff(SWIGTYPE_p_Opaque_BTT_Struct self) {
    double ret = BTTPINVOKE.btt_get_oss_filter_cutoff(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static void btt_set_onset_threshold(SWIGTYPE_p_Opaque_BTT_Struct self, double num_std_devs) {
    BTTPINVOKE.btt_set_onset_threshold(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), num_std_devs);
  }

  public static double btt_get_onset_threshold(SWIGTYPE_p_Opaque_BTT_Struct self) {
    double ret = BTTPINVOKE.btt_get_onset_threshold(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static void btt_set_onset_threshold_min(SWIGTYPE_p_Opaque_BTT_Struct self, double value) {
    BTTPINVOKE.btt_set_onset_threshold_min(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), value);
  }

  public static double btt_get_onset_threshold_min(SWIGTYPE_p_Opaque_BTT_Struct self) {
    double ret = BTTPINVOKE.btt_get_onset_threshold_min(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static void btt_set_noise_cancellation_threshold(SWIGTYPE_p_Opaque_BTT_Struct self, double dB) {
    BTTPINVOKE.btt_set_noise_cancellation_threshold(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), dB);
  }

  public static double btt_get_noise_cancellation_threshold(SWIGTYPE_p_Opaque_BTT_Struct self) {
    double ret = BTTPINVOKE.btt_get_noise_cancellation_threshold(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static void btt_set_autocorrelation_exponent(SWIGTYPE_p_Opaque_BTT_Struct self, double exponent) {
    BTTPINVOKE.btt_set_autocorrelation_exponent(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), exponent);
  }

  public static double btt_get_autocorrelation_exponent(SWIGTYPE_p_Opaque_BTT_Struct self) {
    double ret = BTTPINVOKE.btt_get_autocorrelation_exponent(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static void btt_set_min_tempo(SWIGTYPE_p_Opaque_BTT_Struct self, double min_tempo) {
    BTTPINVOKE.btt_set_min_tempo(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), min_tempo);
  }

  public static double btt_get_min_tempo(SWIGTYPE_p_Opaque_BTT_Struct self) {
    double ret = BTTPINVOKE.btt_get_min_tempo(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static void btt_set_max_tempo(SWIGTYPE_p_Opaque_BTT_Struct self, double max_tempo) {
    BTTPINVOKE.btt_set_max_tempo(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), max_tempo);
  }

  public static double btt_get_max_tempo(SWIGTYPE_p_Opaque_BTT_Struct self) {
    double ret = BTTPINVOKE.btt_get_max_tempo(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static void btt_set_num_tempo_candidates(SWIGTYPE_p_Opaque_BTT_Struct self, int num_candidates) {
    BTTPINVOKE.btt_set_num_tempo_candidates(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), num_candidates);
  }

  public static int btt_get_num_tempo_candidates(SWIGTYPE_p_Opaque_BTT_Struct self) {
    int ret = BTTPINVOKE.btt_get_num_tempo_candidates(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static void btt_set_gaussian_tempo_histogram_decay(SWIGTYPE_p_Opaque_BTT_Struct self, double coefficient) {
    BTTPINVOKE.btt_set_gaussian_tempo_histogram_decay(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), coefficient);
  }

  public static double btt_get_gaussian_tempo_histogram_decay(SWIGTYPE_p_Opaque_BTT_Struct self) {
    double ret = BTTPINVOKE.btt_get_gaussian_tempo_histogram_decay(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static void btt_set_gaussian_tempo_histogram_width(SWIGTYPE_p_Opaque_BTT_Struct self, double width) {
    BTTPINVOKE.btt_set_gaussian_tempo_histogram_width(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), width);
  }

  public static double btt_get_gaussian_tempo_histogram_width(SWIGTYPE_p_Opaque_BTT_Struct self) {
    double ret = BTTPINVOKE.btt_get_gaussian_tempo_histogram_width(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static void btt_set_log_gaussian_tempo_weight_mean(SWIGTYPE_p_Opaque_BTT_Struct self, double bpm) {
    BTTPINVOKE.btt_set_log_gaussian_tempo_weight_mean(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), bpm);
  }

  public static double btt_get_log_gaussian_tempo_weight_mean(SWIGTYPE_p_Opaque_BTT_Struct self) {
    double ret = BTTPINVOKE.btt_get_log_gaussian_tempo_weight_mean(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static void btt_set_log_gaussian_tempo_weight_width(SWIGTYPE_p_Opaque_BTT_Struct self, double bpm) {
    BTTPINVOKE.btt_set_log_gaussian_tempo_weight_width(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), bpm);
  }

  public static double btt_get_log_gaussian_tempo_weight_width(SWIGTYPE_p_Opaque_BTT_Struct self) {
    double ret = BTTPINVOKE.btt_get_log_gaussian_tempo_weight_width(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static void btt_set_cbss_alpha(SWIGTYPE_p_Opaque_BTT_Struct self, double alpha) {
    BTTPINVOKE.btt_set_cbss_alpha(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), alpha);
  }

  public static double btt_get_cbss_alpha(SWIGTYPE_p_Opaque_BTT_Struct self) {
    double ret = BTTPINVOKE.btt_get_cbss_alpha(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static void btt_set_cbss_eta(SWIGTYPE_p_Opaque_BTT_Struct self, double eta) {
    BTTPINVOKE.btt_set_cbss_eta(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), eta);
  }

  public static double btt_get_cbss_eta(SWIGTYPE_p_Opaque_BTT_Struct self) {
    double ret = BTTPINVOKE.btt_get_cbss_eta(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static void btt_set_beat_prediction_adjustment(SWIGTYPE_p_Opaque_BTT_Struct self, int oss_samples_earlier) {
    BTTPINVOKE.btt_set_beat_prediction_adjustment(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), oss_samples_earlier);
  }

  public static int btt_get_beat_prediction_adjustment(SWIGTYPE_p_Opaque_BTT_Struct self) {
    int ret = BTTPINVOKE.btt_get_beat_prediction_adjustment(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static int btt_get_beat_prediction_adjustment_audio_samples(SWIGTYPE_p_Opaque_BTT_Struct self) {
    int ret = BTTPINVOKE.btt_get_beat_prediction_adjustment_audio_samples(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static void btt_set_predicted_beat_trigger_index(SWIGTYPE_p_Opaque_BTT_Struct self, int index) {
    BTTPINVOKE.btt_set_predicted_beat_trigger_index(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), index);
  }

  public static int btt_get_predicted_beat_trigger_index(SWIGTYPE_p_Opaque_BTT_Struct self) {
    int ret = BTTPINVOKE.btt_get_predicted_beat_trigger_index(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static void btt_set_predicted_beat_gaussian_width(SWIGTYPE_p_Opaque_BTT_Struct self, double width) {
    BTTPINVOKE.btt_set_predicted_beat_gaussian_width(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), width);
  }

  public static double btt_get_predicted_beat_gaussian_width(SWIGTYPE_p_Opaque_BTT_Struct self) {
    double ret = BTTPINVOKE.btt_get_predicted_beat_gaussian_width(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static void btt_set_ignore_spurious_beats_duration(SWIGTYPE_p_Opaque_BTT_Struct self, double percent_of_tempo) {
    BTTPINVOKE.btt_set_ignore_spurious_beats_duration(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), percent_of_tempo);
  }

  public static double btt_get_ignore_spurious_beats_duration(SWIGTYPE_p_Opaque_BTT_Struct self) {
    double ret = BTTPINVOKE.btt_get_ignore_spurious_beats_duration(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static void btt_set_analysis_latency_onset_adjustment(SWIGTYPE_p_Opaque_BTT_Struct self, int adjustment) {
    BTTPINVOKE.btt_set_analysis_latency_onset_adjustment(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), adjustment);
  }

  public static int btt_get_analysis_latency_onset_adjustment(SWIGTYPE_p_Opaque_BTT_Struct self) {
    int ret = BTTPINVOKE.btt_get_analysis_latency_onset_adjustment(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static void btt_set_analysis_latency_beat_adjustment(SWIGTYPE_p_Opaque_BTT_Struct self, int adjustment) {
    BTTPINVOKE.btt_set_analysis_latency_beat_adjustment(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), adjustment);
  }

  public static int btt_get_analysis_latency_beat_adjustment(SWIGTYPE_p_Opaque_BTT_Struct self) {
    int ret = BTTPINVOKE.btt_get_analysis_latency_beat_adjustment(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static void btt_set_tracking_mode(SWIGTYPE_p_Opaque_BTT_Struct self, btt_tracking_mode_t mode) {
    BTTPINVOKE.btt_set_tracking_mode(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), (int)mode);
  }

  public static btt_tracking_mode_t btt_get_tracking_mode(SWIGTYPE_p_Opaque_BTT_Struct self) {
    btt_tracking_mode_t ret = (btt_tracking_mode_t)BTTPINVOKE.btt_get_tracking_mode(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static string btt_get_tracking_mode_string(SWIGTYPE_p_Opaque_BTT_Struct self) {
    string ret = BTTPINVOKE.btt_get_tracking_mode_string(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self));
    return ret;
  }

  public static void btt_set_onset_tracking_callback(SWIGTYPE_p_Opaque_BTT_Struct self, SWIGTYPE_p_f_p_void_unsigned_long_long__void callback, SWIGTYPE_p_void callback_self) {
    BTTPINVOKE.btt_set_onset_tracking_callback(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), SWIGTYPE_p_f_p_void_unsigned_long_long__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(callback_self));
  }

  public static SWIGTYPE_p_f_p_void_unsigned_long_long__void btt_get_onset_tracking_callback(SWIGTYPE_p_Opaque_BTT_Struct self, SWIGTYPE_p_p_void returned_callback_self) {
    global::System.IntPtr cPtr = BTTPINVOKE.btt_get_onset_tracking_callback(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), SWIGTYPE_p_p_void.getCPtr(returned_callback_self));
    SWIGTYPE_p_f_p_void_unsigned_long_long__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_void_unsigned_long_long__void(cPtr, false);
    return ret;
  }

  public static void btt_set_beat_tracking_callback(SWIGTYPE_p_Opaque_BTT_Struct self, SWIGTYPE_p_f_p_void_unsigned_long_long__void callback, SWIGTYPE_p_void callback_self) {
    BTTPINVOKE.btt_set_beat_tracking_callback(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), SWIGTYPE_p_f_p_void_unsigned_long_long__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(callback_self));
  }

  public static SWIGTYPE_p_f_p_void_unsigned_long_long__void btt_get_beat_tracking_callback(SWIGTYPE_p_Opaque_BTT_Struct self, SWIGTYPE_p_p_void returned_callback_self) {
    global::System.IntPtr cPtr = BTTPINVOKE.btt_get_beat_tracking_callback(SWIGTYPE_p_Opaque_BTT_Struct.getCPtr(self), SWIGTYPE_p_p_void.getCPtr(returned_callback_self));
    SWIGTYPE_p_f_p_void_unsigned_long_long__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_void_unsigned_long_long__void(cPtr, false);
    return ret;
  }

  public static void dft_init_blackman_window(SWIGTYPE_p_float window, int N) {
    BTTPINVOKE.dft_init_blackman_window(SWIGTYPE_p_float.getCPtr(window), N);
  }

  public static void dft_init_hann_window(SWIGTYPE_p_float window, int N) {
    BTTPINVOKE.dft_init_hann_window(SWIGTYPE_p_float.getCPtr(window), N);
  }

  public static void dft_init_hamming_window(SWIGTYPE_p_float window, int N) {
    BTTPINVOKE.dft_init_hamming_window(SWIGTYPE_p_float.getCPtr(window), N);
  }

  public static void dft_init_half_sine_window(SWIGTYPE_p_float window, int N) {
    BTTPINVOKE.dft_init_half_sine_window(SWIGTYPE_p_float.getCPtr(window), N);
  }

  public static void dft_apply_window(SWIGTYPE_p_float real, SWIGTYPE_p_float window, int N) {
    BTTPINVOKE.dft_apply_window(SWIGTYPE_p_float.getCPtr(real), SWIGTYPE_p_float.getCPtr(window), N);
  }

  public static void dft_raw_forward_dft(SWIGTYPE_p_float real, SWIGTYPE_p_float imag, int N) {
    BTTPINVOKE.dft_raw_forward_dft(SWIGTYPE_p_float.getCPtr(real), SWIGTYPE_p_float.getCPtr(imag), N);
  }

  public static void dft_raw_inverse_dft(SWIGTYPE_p_float real, SWIGTYPE_p_float imag, int N) {
    BTTPINVOKE.dft_raw_inverse_dft(SWIGTYPE_p_float.getCPtr(real), SWIGTYPE_p_float.getCPtr(imag), N);
  }

  public static void dft_bit_reverse_indices(SWIGTYPE_p_float real, SWIGTYPE_p_float imag, int N) {
    BTTPINVOKE.dft_bit_reverse_indices(SWIGTYPE_p_float.getCPtr(real), SWIGTYPE_p_float.getCPtr(imag), N);
  }

  public static void dft_complex_forward_dft(SWIGTYPE_p_float real, SWIGTYPE_p_float imag, int N) {
    BTTPINVOKE.dft_complex_forward_dft(SWIGTYPE_p_float.getCPtr(real), SWIGTYPE_p_float.getCPtr(imag), N);
  }

  public static void dft_complex_inverse_dft(SWIGTYPE_p_float real, SWIGTYPE_p_float imag, int N) {
    BTTPINVOKE.dft_complex_inverse_dft(SWIGTYPE_p_float.getCPtr(real), SWIGTYPE_p_float.getCPtr(imag), N);
  }

  public static void dft_real_forward_dft(SWIGTYPE_p_float real, SWIGTYPE_p_float imag, int N) {
    BTTPINVOKE.dft_real_forward_dft(SWIGTYPE_p_float.getCPtr(real), SWIGTYPE_p_float.getCPtr(imag), N);
  }

  public static void dft_real_inverse_dft(SWIGTYPE_p_float real, SWIGTYPE_p_float imag, int N) {
    BTTPINVOKE.dft_real_inverse_dft(SWIGTYPE_p_float.getCPtr(real), SWIGTYPE_p_float.getCPtr(imag), N);
  }

  public static void dft_2_real_forward_dfts(SWIGTYPE_p_float real_1, SWIGTYPE_p_float real_2, SWIGTYPE_p_float imag_1, SWIGTYPE_p_float imag_2, int N) {
    BTTPINVOKE.dft_2_real_forward_dfts(SWIGTYPE_p_float.getCPtr(real_1), SWIGTYPE_p_float.getCPtr(real_2), SWIGTYPE_p_float.getCPtr(imag_1), SWIGTYPE_p_float.getCPtr(imag_2), N);
  }

  public static void dft_2_real_inverse_dfts(SWIGTYPE_p_float real_1, SWIGTYPE_p_float real_2, SWIGTYPE_p_float imag_1, SWIGTYPE_p_float imag_2, int N) {
    BTTPINVOKE.dft_2_real_inverse_dfts(SWIGTYPE_p_float.getCPtr(real_1), SWIGTYPE_p_float.getCPtr(real_2), SWIGTYPE_p_float.getCPtr(imag_1), SWIGTYPE_p_float.getCPtr(imag_2), N);
  }

  public static void dft_real_convolve(SWIGTYPE_p_float real_1, SWIGTYPE_p_float real_2, SWIGTYPE_p_float imag_1, SWIGTYPE_p_float imag_2, int N) {
    BTTPINVOKE.dft_real_convolve(SWIGTYPE_p_float.getCPtr(real_1), SWIGTYPE_p_float.getCPtr(real_2), SWIGTYPE_p_float.getCPtr(imag_1), SWIGTYPE_p_float.getCPtr(imag_2), N);
  }

  public static void dft_real_correlate(SWIGTYPE_p_float real_1, SWIGTYPE_p_float real_2, SWIGTYPE_p_float imag_1, SWIGTYPE_p_float imag_2, int N) {
    BTTPINVOKE.dft_real_correlate(SWIGTYPE_p_float.getCPtr(real_1), SWIGTYPE_p_float.getCPtr(real_2), SWIGTYPE_p_float.getCPtr(imag_1), SWIGTYPE_p_float.getCPtr(imag_2), N);
  }

  public static void dft_real_autocorrelate(SWIGTYPE_p_float real, SWIGTYPE_p_float imag, int N) {
    BTTPINVOKE.dft_real_autocorrelate(SWIGTYPE_p_float.getCPtr(real), SWIGTYPE_p_float.getCPtr(imag), N);
  }

  public static void dft_real_generalized_autocorrelation(SWIGTYPE_p_float real, SWIGTYPE_p_float imag, int N, double exponent) {
    BTTPINVOKE.dft_real_generalized_autocorrelation(SWIGTYPE_p_float.getCPtr(real), SWIGTYPE_p_float.getCPtr(imag), N, exponent);
  }

  public static void dft_rect_to_polar(SWIGTYPE_p_float real, SWIGTYPE_p_float imag, int N) {
    BTTPINVOKE.dft_rect_to_polar(SWIGTYPE_p_float.getCPtr(real), SWIGTYPE_p_float.getCPtr(imag), N);
  }

  public static void dft_polar_to_rect(SWIGTYPE_p_float real, SWIGTYPE_p_float imag, int N) {
    BTTPINVOKE.dft_polar_to_rect(SWIGTYPE_p_float.getCPtr(real), SWIGTYPE_p_float.getCPtr(imag), N);
  }

  public static void dft_magnitude_to_db(SWIGTYPE_p_float real, int N) {
    BTTPINVOKE.dft_magnitude_to_db(SWIGTYPE_p_float.getCPtr(real), N);
  }

  public static void dft_normalize_magnitude(SWIGTYPE_p_float real, int N) {
    BTTPINVOKE.dft_normalize_magnitude(SWIGTYPE_p_float.getCPtr(real), N);
  }

  public static double dft_bin_of_frequency(double hz, double sample_rate, int N) {
    double ret = BTTPINVOKE.dft_bin_of_frequency(hz, sample_rate, N);
    return ret;
  }

  public static double dft_frequency_of_bin(double bin, double sample_rate, int N) {
    double ret = BTTPINVOKE.dft_frequency_of_bin(bin, sample_rate, N);
    return ret;
  }

  public static int dft_smallest_power_of_2_at_least_as_great_as(int n) {
    int ret = BTTPINVOKE.dft_smallest_power_of_2_at_least_as_great_as(n);
    return ret;
  }

  public static SWIGTYPE_p_opaque_filter_struct filter_new(filter_type_t type, float cutoff, int order) {
    global::System.IntPtr cPtr = BTTPINVOKE.filter_new((int)type, cutoff, order);
    SWIGTYPE_p_opaque_filter_struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_opaque_filter_struct(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_opaque_filter_struct filter_destroy(SWIGTYPE_p_opaque_filter_struct self) {
    global::System.IntPtr cPtr = BTTPINVOKE.filter_destroy(SWIGTYPE_p_opaque_filter_struct.getCPtr(self));
    SWIGTYPE_p_opaque_filter_struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_opaque_filter_struct(cPtr, false);
    return ret;
  }

  public static void filter_clear(SWIGTYPE_p_opaque_filter_struct self) {
    BTTPINVOKE.filter_clear(SWIGTYPE_p_opaque_filter_struct.getCPtr(self));
  }

  public static void filter_set_filter_type(SWIGTYPE_p_opaque_filter_struct self, filter_type_t type) {
    BTTPINVOKE.filter_set_filter_type(SWIGTYPE_p_opaque_filter_struct.getCPtr(self), (int)type);
  }

  public static filter_type_t filter_get_filter_type(SWIGTYPE_p_opaque_filter_struct self) {
    filter_type_t ret = (filter_type_t)BTTPINVOKE.filter_get_filter_type(SWIGTYPE_p_opaque_filter_struct.getCPtr(self));
    return ret;
  }

  public static void filter_set_sample_rate(SWIGTYPE_p_opaque_filter_struct self, float sample_rate) {
    BTTPINVOKE.filter_set_sample_rate(SWIGTYPE_p_opaque_filter_struct.getCPtr(self), sample_rate);
  }

  public static float filter_get_sample_rate(SWIGTYPE_p_opaque_filter_struct self) {
    float ret = BTTPINVOKE.filter_get_sample_rate(SWIGTYPE_p_opaque_filter_struct.getCPtr(self));
    return ret;
  }

  public static void filter_set_cutoff(SWIGTYPE_p_opaque_filter_struct self, float cutoff) {
    BTTPINVOKE.filter_set_cutoff(SWIGTYPE_p_opaque_filter_struct.getCPtr(self), cutoff);
  }

  public static float filter_get_cutoff(SWIGTYPE_p_opaque_filter_struct self) {
    float ret = BTTPINVOKE.filter_get_cutoff(SWIGTYPE_p_opaque_filter_struct.getCPtr(self));
    return ret;
  }

  public static void filter_set_order(SWIGTYPE_p_opaque_filter_struct self, int order) {
    BTTPINVOKE.filter_set_order(SWIGTYPE_p_opaque_filter_struct.getCPtr(self), order);
  }

  public static int filter_get_order(SWIGTYPE_p_opaque_filter_struct self) {
    int ret = BTTPINVOKE.filter_get_order(SWIGTYPE_p_opaque_filter_struct.getCPtr(self));
    return ret;
  }

  public static void filter_set_window_type(SWIGTYPE_p_opaque_filter_struct self, filter_window_t window) {
    BTTPINVOKE.filter_set_window_type(SWIGTYPE_p_opaque_filter_struct.getCPtr(self), (int)window);
  }

  public static filter_window_t filter_get_window_type(SWIGTYPE_p_opaque_filter_struct self) {
    filter_window_t ret = (filter_window_t)BTTPINVOKE.filter_get_window_type(SWIGTYPE_p_opaque_filter_struct.getCPtr(self));
    return ret;
  }

  public static void filter_process_data(SWIGTYPE_p_opaque_filter_struct self, SWIGTYPE_p_float data, int num_samples) {
    BTTPINVOKE.filter_process_data(SWIGTYPE_p_opaque_filter_struct.getCPtr(self), SWIGTYPE_p_float.getCPtr(data), num_samples);
  }

  public static SWIGTYPE_p_opaque_online_average_struct online_average_new() {
    global::System.IntPtr cPtr = BTTPINVOKE.online_average_new();
    SWIGTYPE_p_opaque_online_average_struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_opaque_online_average_struct(cPtr, false);
    return ret;
  }

  public static void online_average_init(SWIGTYPE_p_opaque_online_average_struct self) {
    BTTPINVOKE.online_average_init(SWIGTYPE_p_opaque_online_average_struct.getCPtr(self));
  }

  public static SWIGTYPE_p_opaque_online_average_struct online_average_destroy(SWIGTYPE_p_opaque_online_average_struct self) {
    global::System.IntPtr cPtr = BTTPINVOKE.online_average_destroy(SWIGTYPE_p_opaque_online_average_struct.getCPtr(self));
    SWIGTYPE_p_opaque_online_average_struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_opaque_online_average_struct(cPtr, false);
    return ret;
  }

  public static int online_average_n(SWIGTYPE_p_opaque_online_average_struct self) {
    int ret = BTTPINVOKE.online_average_n(SWIGTYPE_p_opaque_online_average_struct.getCPtr(self));
    return ret;
  }

  public static double online_average_mean(SWIGTYPE_p_opaque_online_average_struct self) {
    double ret = BTTPINVOKE.online_average_mean(SWIGTYPE_p_opaque_online_average_struct.getCPtr(self));
    return ret;
  }

  public static double online_average_variance(SWIGTYPE_p_opaque_online_average_struct self) {
    double ret = BTTPINVOKE.online_average_variance(SWIGTYPE_p_opaque_online_average_struct.getCPtr(self));
    return ret;
  }

  public static double online_average_std_dev(SWIGTYPE_p_opaque_online_average_struct self) {
    double ret = BTTPINVOKE.online_average_std_dev(SWIGTYPE_p_opaque_online_average_struct.getCPtr(self));
    return ret;
  }

  public static void online_average_update(SWIGTYPE_p_opaque_online_average_struct self, double x) {
    BTTPINVOKE.online_average_update(SWIGTYPE_p_opaque_online_average_struct.getCPtr(self), x);
  }

  public static SWIGTYPE_p_opaque_moving_average_struct moving_average_new(uint N) {
    global::System.IntPtr cPtr = BTTPINVOKE.moving_average_new(N);
    SWIGTYPE_p_opaque_moving_average_struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_opaque_moving_average_struct(cPtr, false);
    return ret;
  }

  public static void moving_average_init(SWIGTYPE_p_opaque_moving_average_struct self) {
    BTTPINVOKE.moving_average_init(SWIGTYPE_p_opaque_moving_average_struct.getCPtr(self));
  }

  public static SWIGTYPE_p_opaque_moving_average_struct moving_average_destroy(SWIGTYPE_p_opaque_moving_average_struct self) {
    global::System.IntPtr cPtr = BTTPINVOKE.moving_average_destroy(SWIGTYPE_p_opaque_moving_average_struct.getCPtr(self));
    SWIGTYPE_p_opaque_moving_average_struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_opaque_moving_average_struct(cPtr, false);
    return ret;
  }

  public static int moving_average_N(SWIGTYPE_p_opaque_moving_average_struct self) {
    int ret = BTTPINVOKE.moving_average_N(SWIGTYPE_p_opaque_moving_average_struct.getCPtr(self));
    return ret;
  }

  public static int moving_average_n(SWIGTYPE_p_opaque_moving_average_struct self) {
    int ret = BTTPINVOKE.moving_average_n(SWIGTYPE_p_opaque_moving_average_struct.getCPtr(self));
    return ret;
  }

  public static double moving_average_mean(SWIGTYPE_p_opaque_moving_average_struct self) {
    double ret = BTTPINVOKE.moving_average_mean(SWIGTYPE_p_opaque_moving_average_struct.getCPtr(self));
    return ret;
  }

  public static double moving_average_variance(SWIGTYPE_p_opaque_moving_average_struct self) {
    double ret = BTTPINVOKE.moving_average_variance(SWIGTYPE_p_opaque_moving_average_struct.getCPtr(self));
    return ret;
  }

  public static double moving_average_std_dev(SWIGTYPE_p_opaque_moving_average_struct self) {
    double ret = BTTPINVOKE.moving_average_std_dev(SWIGTYPE_p_opaque_moving_average_struct.getCPtr(self));
    return ret;
  }

  public static void moving_average_update(SWIGTYPE_p_opaque_moving_average_struct self, double x) {
    BTTPINVOKE.moving_average_update(SWIGTYPE_p_opaque_moving_average_struct.getCPtr(self), x);
  }

  public static SWIGTYPE_p_opaque_online_regression_struct online_regression_new() {
    global::System.IntPtr cPtr = BTTPINVOKE.online_regression_new();
    SWIGTYPE_p_opaque_online_regression_struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_opaque_online_regression_struct(cPtr, false);
    return ret;
  }

  public static void online_regression_init(SWIGTYPE_p_opaque_online_regression_struct self) {
    BTTPINVOKE.online_regression_init(SWIGTYPE_p_opaque_online_regression_struct.getCPtr(self));
  }

  public static SWIGTYPE_p_opaque_online_regression_struct online_regression_destroy(SWIGTYPE_p_opaque_online_regression_struct self) {
    global::System.IntPtr cPtr = BTTPINVOKE.online_regression_destroy(SWIGTYPE_p_opaque_online_regression_struct.getCPtr(self));
    SWIGTYPE_p_opaque_online_regression_struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_opaque_online_regression_struct(cPtr, false);
    return ret;
  }

  public static int online_regression_n(SWIGTYPE_p_opaque_online_regression_struct self) {
    int ret = BTTPINVOKE.online_regression_n(SWIGTYPE_p_opaque_online_regression_struct.getCPtr(self));
    return ret;
  }

  public static double online_regression_covariance(SWIGTYPE_p_opaque_online_regression_struct self) {
    double ret = BTTPINVOKE.online_regression_covariance(SWIGTYPE_p_opaque_online_regression_struct.getCPtr(self));
    return ret;
  }

  public static double online_regression_slope(SWIGTYPE_p_opaque_online_regression_struct self) {
    double ret = BTTPINVOKE.online_regression_slope(SWIGTYPE_p_opaque_online_regression_struct.getCPtr(self));
    return ret;
  }

  public static double online_regression_y_intercept(SWIGTYPE_p_opaque_online_regression_struct self) {
    double ret = BTTPINVOKE.online_regression_y_intercept(SWIGTYPE_p_opaque_online_regression_struct.getCPtr(self));
    return ret;
  }

  public static double online_regression_r_squared(SWIGTYPE_p_opaque_online_regression_struct self) {
    double ret = BTTPINVOKE.online_regression_r_squared(SWIGTYPE_p_opaque_online_regression_struct.getCPtr(self));
    return ret;
  }

  public static void online_regression_update(SWIGTYPE_p_opaque_online_regression_struct self, double a_data, double b_data) {
    BTTPINVOKE.online_regression_update(SWIGTYPE_p_opaque_online_regression_struct.getCPtr(self), a_data, b_data);
  }

  public static SWIGTYPE_p_opaque_adaptive_threshold_struct adaptive_threshold_new(uint N) {
    global::System.IntPtr cPtr = BTTPINVOKE.adaptive_threshold_new(N);
    SWIGTYPE_p_opaque_adaptive_threshold_struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_opaque_adaptive_threshold_struct(cPtr, false);
    return ret;
  }

  public static void adaptive_threshold_init(SWIGTYPE_p_opaque_adaptive_threshold_struct self) {
    BTTPINVOKE.adaptive_threshold_init(SWIGTYPE_p_opaque_adaptive_threshold_struct.getCPtr(self));
  }

  public static void adaptive_threshold_clear(SWIGTYPE_p_opaque_adaptive_threshold_struct self) {
    BTTPINVOKE.adaptive_threshold_clear(SWIGTYPE_p_opaque_adaptive_threshold_struct.getCPtr(self));
  }

  public static SWIGTYPE_p_opaque_adaptive_threshold_struct adaptive_threshold_destroy(SWIGTYPE_p_opaque_adaptive_threshold_struct self) {
    global::System.IntPtr cPtr = BTTPINVOKE.adaptive_threshold_destroy(SWIGTYPE_p_opaque_adaptive_threshold_struct.getCPtr(self));
    SWIGTYPE_p_opaque_adaptive_threshold_struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_opaque_adaptive_threshold_struct(cPtr, false);
    return ret;
  }

  public static double adaptive_threshold_smoothing(SWIGTYPE_p_opaque_adaptive_threshold_struct self) {
    double ret = BTTPINVOKE.adaptive_threshold_smoothing(SWIGTYPE_p_opaque_adaptive_threshold_struct.getCPtr(self));
    return ret;
  }

  public static void adaptive_threshold_set_smoothing(SWIGTYPE_p_opaque_adaptive_threshold_struct self, double coefficient) {
    BTTPINVOKE.adaptive_threshold_set_smoothing(SWIGTYPE_p_opaque_adaptive_threshold_struct.getCPtr(self), coefficient);
  }

  public static double adaptive_threshold_threshold_value(SWIGTYPE_p_opaque_adaptive_threshold_struct self) {
    double ret = BTTPINVOKE.adaptive_threshold_threshold_value(SWIGTYPE_p_opaque_adaptive_threshold_struct.getCPtr(self));
    return ret;
  }

  public static double adaptive_threshold_threshold(SWIGTYPE_p_opaque_adaptive_threshold_struct self) {
    double ret = BTTPINVOKE.adaptive_threshold_threshold(SWIGTYPE_p_opaque_adaptive_threshold_struct.getCPtr(self));
    return ret;
  }

  public static void adaptive_threshold_set_threshold(SWIGTYPE_p_opaque_adaptive_threshold_struct self, double std_devs) {
    BTTPINVOKE.adaptive_threshold_set_threshold(SWIGTYPE_p_opaque_adaptive_threshold_struct.getCPtr(self), std_devs);
  }

  public static double adaptive_threshold_threshold_min(SWIGTYPE_p_opaque_adaptive_threshold_struct self) {
    double ret = BTTPINVOKE.adaptive_threshold_threshold_min(SWIGTYPE_p_opaque_adaptive_threshold_struct.getCPtr(self));
    return ret;
  }

  public static void adaptive_threshold_set_threshold_min(SWIGTYPE_p_opaque_adaptive_threshold_struct self, double min) {
    BTTPINVOKE.adaptive_threshold_set_threshold_min(SWIGTYPE_p_opaque_adaptive_threshold_struct.getCPtr(self), min);
  }

  public static double adaptive_threshold_onset_signal(SWIGTYPE_p_opaque_adaptive_threshold_struct self) {
    double ret = BTTPINVOKE.adaptive_threshold_onset_signal(SWIGTYPE_p_opaque_adaptive_threshold_struct.getCPtr(self));
    return ret;
  }

  public static double adaptive_threshold_mean(SWIGTYPE_p_opaque_adaptive_threshold_struct self) {
    double ret = BTTPINVOKE.adaptive_threshold_mean(SWIGTYPE_p_opaque_adaptive_threshold_struct.getCPtr(self));
    return ret;
  }

  public static double adaptive_threshold_update(SWIGTYPE_p_opaque_adaptive_threshold_struct self, double x) {
    double ret = BTTPINVOKE.adaptive_threshold_update(SWIGTYPE_p_opaque_adaptive_threshold_struct.getCPtr(self), x);
    return ret;
  }

  public static double statistics_random_flat() {
    double ret = BTTPINVOKE.statistics_random_flat();
    return ret;
  }

  public static double statistics_random_normal(double mean, double std_dev) {
    double ret = BTTPINVOKE.statistics_random_normal(mean, std_dev);
    return ret;
  }

  public static double statistics_random_cauchy(double peak_location, double half_width_at_half_maximum) {
    double ret = BTTPINVOKE.statistics_random_cauchy(peak_location, half_width_at_half_maximum);
    return ret;
  }

  public static SWIGTYPE_p_Opaque_STFT_Struct stft_new(int window_size, int overlap, int should_resynthesize) {
    global::System.IntPtr cPtr = BTTPINVOKE.stft_new(window_size, overlap, should_resynthesize);
    SWIGTYPE_p_Opaque_STFT_Struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Opaque_STFT_Struct(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_Opaque_STFT_Struct stft_destroy(SWIGTYPE_p_Opaque_STFT_Struct self) {
    global::System.IntPtr cPtr = BTTPINVOKE.stft_destroy(SWIGTYPE_p_Opaque_STFT_Struct.getCPtr(self));
    SWIGTYPE_p_Opaque_STFT_Struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Opaque_STFT_Struct(cPtr, false);
    return ret;
  }

  public static void stft_process(SWIGTYPE_p_Opaque_STFT_Struct self, SWIGTYPE_p_float real_input, int len, SWIGTYPE_p_f_p_void_p_float_p_float_int__void onprocess, SWIGTYPE_p_void onprocess_self) {
    BTTPINVOKE.stft_process(SWIGTYPE_p_Opaque_STFT_Struct.getCPtr(self), SWIGTYPE_p_float.getCPtr(real_input), len, SWIGTYPE_p_f_p_void_p_float_p_float_int__void.getCPtr(onprocess), SWIGTYPE_p_void.getCPtr(onprocess_self));
  }

  public static int stft_get_N(SWIGTYPE_p_Opaque_STFT_Struct self) {
    int ret = BTTPINVOKE.stft_get_N(SWIGTYPE_p_Opaque_STFT_Struct.getCPtr(self));
    return ret;
  }

  public static int stft_get_overlap(SWIGTYPE_p_Opaque_STFT_Struct self) {
    int ret = BTTPINVOKE.stft_get_overlap(SWIGTYPE_p_Opaque_STFT_Struct.getCPtr(self));
    return ret;
  }

  public static int stft_get_hop(SWIGTYPE_p_Opaque_STFT_Struct self) {
    int ret = BTTPINVOKE.stft_get_hop(SWIGTYPE_p_Opaque_STFT_Struct.getCPtr(self));
    return ret;
  }

  public static SWIGTYPE_p_Opaque_TWO_STFTS_Struct two_stfts_new(int window_size, int overlap, int should_resynthesize) {
    global::System.IntPtr cPtr = BTTPINVOKE.two_stfts_new(window_size, overlap, should_resynthesize);
    SWIGTYPE_p_Opaque_TWO_STFTS_Struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Opaque_TWO_STFTS_Struct(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_Opaque_TWO_STFTS_Struct two_stfts_destroy(SWIGTYPE_p_Opaque_TWO_STFTS_Struct self) {
    global::System.IntPtr cPtr = BTTPINVOKE.two_stfts_destroy(SWIGTYPE_p_Opaque_TWO_STFTS_Struct.getCPtr(self));
    SWIGTYPE_p_Opaque_TWO_STFTS_Struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Opaque_TWO_STFTS_Struct(cPtr, false);
    return ret;
  }

  public static void two_stfts_process(SWIGTYPE_p_Opaque_TWO_STFTS_Struct self, SWIGTYPE_p_float real_input, SWIGTYPE_p_float real_input_2, int len, int two_inverses, SWIGTYPE_p_f_p_void_p_float_p_float_p_float_p_float_int__void onprocess, SWIGTYPE_p_void onprocess_self) {
    BTTPINVOKE.two_stfts_process(SWIGTYPE_p_Opaque_TWO_STFTS_Struct.getCPtr(self), SWIGTYPE_p_float.getCPtr(real_input), SWIGTYPE_p_float.getCPtr(real_input_2), len, two_inverses, SWIGTYPE_p_f_p_void_p_float_p_float_p_float_p_float_int__void.getCPtr(onprocess), SWIGTYPE_p_void.getCPtr(onprocess_self));
  }

  public static readonly int __BTT__ = BTTPINVOKE.__BTT___get();
  public static readonly int BTT_SUGGESTED_SPECTRAL_FLUX_STFT_LEN = BTTPINVOKE.BTT_SUGGESTED_SPECTRAL_FLUX_STFT_LEN_get();
  public static readonly int BTT_SUGGESTED_SPECTRAL_FLUX_STFT_OVERLAP = BTTPINVOKE.BTT_SUGGESTED_SPECTRAL_FLUX_STFT_OVERLAP_get();
  public static readonly int BTT_SUGGESTED_OSS_FILTER_ORDER = BTTPINVOKE.BTT_SUGGESTED_OSS_FILTER_ORDER_get();
  public static readonly int BTT_SUGGESTED_OSS_LENGTH = BTTPINVOKE.BTT_SUGGESTED_OSS_LENGTH_get();
  public static readonly int BTT_SUGGESTED_ONSET_THRESHOLD_N = BTTPINVOKE.BTT_SUGGESTED_ONSET_THRESHOLD_N_get();
  public static readonly int BTT_SUGGESTED_SAMPLE_RATE = BTTPINVOKE.BTT_SUGGESTED_SAMPLE_RATE_get();
  public static readonly int BTT_SUGGESTED_CBSS_LENGTH = BTTPINVOKE.BTT_SUGGESTED_CBSS_LENGTH_get();
  public static readonly int BTT_DEFAULT_ANALYSIS_LATENCY_ONSET_ADJUSTMENT = BTTPINVOKE.BTT_DEFAULT_ANALYSIS_LATENCY_ONSET_ADJUSTMENT_get();
  public static readonly int BTT_DEFAULT_ANALYSIS_LATENCY_BEAT_ADJUSTMENT = BTTPINVOKE.BTT_DEFAULT_ANALYSIS_LATENCY_BEAT_ADJUSTMENT_get();
  public static readonly int BTT_DEFAULT_MIN_TEMPO = BTTPINVOKE.BTT_DEFAULT_MIN_TEMPO_get();
  public static readonly int BTT_DEFAULT_MAX_TEMPO = BTTPINVOKE.BTT_DEFAULT_MAX_TEMPO_get();
  public static readonly int BTT_DEFAULT_SPECTRAL_COMPRESSION_GAMMA = BTTPINVOKE.BTT_DEFAULT_SPECTRAL_COMPRESSION_GAMMA_get();
  public static readonly double BTT_DEFAULT_AUTOCORRELATION_EXPONENT = BTTPINVOKE.BTT_DEFAULT_AUTOCORRELATION_EXPONENT_get();
  public static readonly int BTT_DEFAULT_NUM_TEMPO_CANDIDATES = BTTPINVOKE.BTT_DEFAULT_NUM_TEMPO_CANDIDATES_get();
  public static readonly int BTT_DEFAULT_OSS_FILTER_CUTOFF = BTTPINVOKE.BTT_DEFAULT_OSS_FILTER_CUTOFF_get();
  public static readonly int BTT_DEFAULT_USE_AMP_NORMALIZATION = BTTPINVOKE.BTT_DEFAULT_USE_AMP_NORMALIZATION_get();
  public static readonly double BTT_DEFAULT_ONSET_TREHSHOLD = BTTPINVOKE.BTT_DEFAULT_ONSET_TREHSHOLD_get();
  public static readonly double BTT_DEFAULT_ONSET_TREHSHOLD_MIN = BTTPINVOKE.BTT_DEFAULT_ONSET_TREHSHOLD_MIN_get();
  public static readonly int BTT_DEFAULT_NOISE_CANCELLATION_THRESHOLD = BTTPINVOKE.BTT_DEFAULT_NOISE_CANCELLATION_THRESHOLD_get();
  public static readonly int BTT_DEFAULT_LOG_GAUSSIAN_TEMPO_WEIGHT_MEAN = BTTPINVOKE.BTT_DEFAULT_LOG_GAUSSIAN_TEMPO_WEIGHT_MEAN_get();
  public static readonly int BTT_DEFAULT_LOG_GAUSSIAN_TEMPO_WEIGHT_WIDTH = BTTPINVOKE.BTT_DEFAULT_LOG_GAUSSIAN_TEMPO_WEIGHT_WIDTH_get();
  public static readonly double BTT_DEFAULT_GAUSSIAN_TEMPO_HISTOGRAM_DECAY = BTTPINVOKE.BTT_DEFAULT_GAUSSIAN_TEMPO_HISTOGRAM_DECAY_get();
  public static readonly int BTT_DEFAULT_GAUSSIAN_TEMPO_HISTOGRAM_WIDTH = BTTPINVOKE.BTT_DEFAULT_GAUSSIAN_TEMPO_HISTOGRAM_WIDTH_get();
  public static readonly double BTT_DEFAULT_CBSS_ALPHA = BTTPINVOKE.BTT_DEFAULT_CBSS_ALPHA_get();
  public static readonly int BTT_DEFAULT_CBSS_ETA = BTTPINVOKE.BTT_DEFAULT_CBSS_ETA_get();
  public static readonly int BTT_DEFAULT_BEAT_PREDICTION_ADJUSTMENT = BTTPINVOKE.BTT_DEFAULT_BEAT_PREDICTION_ADJUSTMENT_get();
  public static readonly int BTT_DEFAULT_PREDICTED_BEAT_TRIGGER_INDEX = BTTPINVOKE.BTT_DEFAULT_PREDICTED_BEAT_TRIGGER_INDEX_get();
  public static readonly int BTT_DEFAULT_PREDICTED_BEAT_GAUSSIAN_WIDTH = BTTPINVOKE.BTT_DEFAULT_PREDICTED_BEAT_GAUSSIAN_WIDTH_get();
  public static readonly int BTT_DEFAULT_IGNORE_SPURIOUS_BEATS_DURATION = BTTPINVOKE.BTT_DEFAULT_IGNORE_SPURIOUS_BEATS_DURATION_get();
  public static readonly int BTT_DEFAULT_COUNT_IN_N = BTTPINVOKE.BTT_DEFAULT_COUNT_IN_N_get();
  public static readonly int BTT_DEFAULT_XCORR_NUM_PULSES = BTTPINVOKE.BTT_DEFAULT_XCORR_NUM_PULSES_get();
  public static readonly int __DFT__ = BTTPINVOKE.__DFT___get();
  public static readonly int __STFT__ = BTTPINVOKE.__STFT___get();
}

}
